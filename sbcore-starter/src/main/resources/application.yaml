jwt:
  token: ${JWT_TOKEN:256-bit-token}

spring:
  datasource:
    username: ${DB_USER:user}
    url: jdbc:postgresql://${DB_HOST:host}:${DB_PORT:5432}/${DB_SCHEMA:schema}
    password: ${DB_PASS:pass}

  hikari:
    maximum-pool-size: 20
    minimum-idle: 5
    idle-timeout: 30000
    max-lifetime: 1800000
    connection-timeout: 20000
    leak-detection-threshold: 2000

  messages:
    basename: messages
  quartz:
    job-store-type: jdbc
    jdbc:
      initialize-schema: always  # Set to "never" if the schema is already initialized
    #    overwrite-existing-jobs: true
    properties:
      org:
        quartz:
          jobStore:
            #            class: org.quartz.impl.jdbcjobstore.JobStoreTX
            driverDelegateClass: org.quartz.impl.jdbcjobstore.PostgreSQLDelegate
    auto-startup: true

  data:
    redis:
      url: redis://:${REDIS_PASSWORD:test}@${REDIS_HOST:localhost}:${REDIS_PORT:6379}/0
      timeout: 6000

  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: 'false'

  application:
    name: sbcore

  task:
    execution:
      pool:
        core-size: 8
        max-size: 16
        queue-capacity: 100
    scheduling:
      pool:
        size: 10

logging:
  level:
    org.springframework.security: WARN
    org.springframework.web: INFO
    org.hibernate.SQL: ERROR
    root: INFO
  file:
    path: ./logs

server:
  forward-headers-strategy: native
  error:
    include-message: always
  port: ${APP_PORT:8080}
  compression:
    enabled: true
    min-response-size: 1024
    mime-types: text/html, text/xml, text/plain, text/css, application/json, application/javascript
  servlet:
    encoding:
      charset: UTF-8
      enabled: true
      force: true


s3:
  liara:
    endpoint: https://example.com
    access: access
    secret: secret
#    endpoint: http://localhost:9000
#    access: minioadmin
#    secret: minioadmin
security:
  jwt:
    exp: 86400000

document:
  jwt:
    exp: 3600000

#    this config for custom executor service made in core
config:
  executor:
    size: 10

image-processor:
  ratio: 0.6
  scale: 1.0

generator:
  enabled: false
  xmlFolderPath: generate-xmls
  basePackage: io.github.alishahidi

garbage:
  collector:
    document:
      time: 86400000
    log:
      time: 86400000
      expire: 30

app:
  cors:
    allowed-origins: http://localhost:3000


springdoc:
  swagger-ui:
    enabled: ${SWAGGER_UI_ENABLED:false}
  api-docs:
    path: /v3/api-docs

sbcore:
  async:
    corePoolSize: 5
    maxPoolSize: 15
    queueCapacity: 200

